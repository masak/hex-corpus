# A ladder is a sequence of this kind:
#
#     1 3 5 7 9
#      2 4 6 8
#
# I.e. player 1 and player 2 keep moving always in the same row/column,
# but always one step to the side.

sub number-of-moves($file) {
    given open($file) {
        my $n = +.lines;
        .close;
        return $n;
    }
}

my @input-files = qx[find mvm hvm hvh -type f].lines;
my @sorted-input-files = @input-files.sort(&number-of-moves);

class Move {
    has Int $.row;
    has Int $.col;
    has Bool $.ladder;

    method Str { $.ladder ?? 'x' !! '.' }
}

for @sorted-input-files -> $file {
    given open($file) {
        my @moves;
        for .lines  {
            when /^ [Black|White] ' places ' (\w)(\d+) '.' $/ {
                my $row = +$1;
                my $col = ord($0) - ord('a') + 1;

                my $last-move = @moves[*-1];
                my $second-last-move = @moves[*-2];
                my $ladder = False; # until proven guilty

                if $last-move ~~ Move && $second-last-move ~~ Move {
                    sub check($dr, $d2r, $dc, $d2c) {
                        $row == $last-move.row + $dr == $second-last-move.row + $d2r
                        && $col == $last-move.col + $dc == $second-last-move.col + $d2c;
                    }

                    #  NW  NE
                    #    /\
                    # W |  | E
                    #    \/
                    #  SW  SE

                    sub direction($_) {
                        return 0, +1 when 'E';
                        return +1, 0 when 'SE';
                        return +1, -1 when 'SW';
                        return 0, -1 when 'W';
                        return -1, 0 when 'NW';
                        return -1, +1 when 'NE';
                        die "Unknown direction '$_'";
                    }

                    sub walk([$dir1, $dir2]) {
                        my ($dr1, $dc1) = direction($dir1);
                        my ($dr2, $dc2) = direction($dir2);
                        check(-$dr2, -$dr2-$dr1, -$dc2, -$dc2-$dc1);
                    }

                    # There are eight ladder movements. For example, the one at the top of the
                    # file is the one that follows the south edge counter-clockwise: ccw-s.

                    sub cw-s { walk <SE NE> }
                    sub cw-e { walk <NE W> }
                    sub cw-n { walk <NW SW> }
                    sub cw-w { walk <SW E> }
                    sub ccw-s { walk <SW NW> }
                    sub ccw-e { walk <E SW> }
                    sub ccw-n { walk <NE SE> }
                    sub ccw-w { walk <W NE> }

                    $ladder = [||] cw-s, cw-e, cw-n, cw-w, ccw-s, ccw-e, ccw-n, ccw-w;
                }

                push @moves, Move.new(:$row, :$col, :$ladder);
            }
            when /^ [Black|White] ' resigns.' $/ {
                push @moves, 'R';
            }
            when /^ [Black|White] ' swaps.' $/ {
                push @moves, 'S';
            }
            when /^ [Black|White] ' times out.' $/ {
                push @moves, 'T';
            }
            die $_;
        }
        .close;
        say sprintf "%12s   %s", $file, @moves.join;
    }
}

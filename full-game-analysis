my @board;
sub reset_board {
    @board = ['.' xx 15] xx 15;
    for 1..13 -> $c2 { @board[0][$c2] = "V"; @board[14][$c2] = "V" }
    for 1..13 -> $c1 { @board[$c1][0] = "H"; @board[$c1][14] = "H" }
}
reset_board;

my %chains;
sub reset_chains {
    %chains =
        "V" => {
            "Cv!U" => (1..13).map(-> $c2 { [0, $c2] }),
            "Cv!D" => (1..13).map(-> $c2 { [14, $c2] }),
        },
        "H" => {
            "Ch!L" => (1..13).map(-> $c1 { [$c1, 0] }),
            "Ch!R" => (1..13).map(-> $c1 { [$c1, 14] }),
        },
    ;
}
reset_chains;

sub show_board(@links, %groups, $lastmove [$l1, $l2]) {
    my %linkpos;
    for @links -> $link {
        my $pos = "$link.c1();$link.c2()";
        %linkpos{$pos} ~= $link.color.lc;
    }
    my %group_of_coord;
    for "V", "H" -> $color {
        sub pieces(Pair (:key($name), :value(@chains))) {
            my $pieces = [+] @chains.map: -> $chain {
                %chains{$color}{$chain}.elems
            };
            $pieces -= 13 for $name.comb(/'!'/);
            return $pieces;
        }
        my $next_unique_letter = { V => "A", H => "a" }{$color};
        for %groups{$color}.sort(*.key).sort(&pieces).reverse -> Pair $p (:key($name), :value(@chains)) {
            my $pieces = pieces($p);
            next unless $pieces;
            my $letter = $next_unique_letter++;
            for @chains -> $chain {
                for %chains{$color}{$chain}[] -> [$c1, $c2] {
                    %group_of_coord{"$c1;$c2"} = $letter;
                }
            }
        }
    }
    sub space($c1, $c2) {
        [$c1, $c2] eqv [$l1, $l2]   ?? "<" !!
        [$c1, $c2] eqv [$l1, $l2+1] ?? ">" !! " ";
    }
    for 1..13 -> $c1 {
        print " " x ($c1 - 1), space($c1, 1);
        for 1..13 -> $c2 {
            print @board[$c1][$c2];
            print space($c1, $c2 + 1);
        }
        print " " x 6, space($c1, 1);
        for 1..13 -> $c2 {
            if %linkpos{"$c1;$c2"} {
                my $colors = %linkpos{"$c1;$c2"};
                if $colors ~~ /v/ & /h/ && $colors.chars > 2 {
                    print "‽";
                }
                elsif $colors ~~ /v/ & /h/ {
                    print "!";
                }
                elsif $colors.chars > 1 {
                    print "?";
                }
                else {
                    print { v => "|", h => "-" }{$colors};
                }
            }
            else {
                print %group_of_coord{"$c1;$c2"} // ".";
            }
            print space($c1, $c2 + 1);
        }
        print "\n";
    }
    print "\n";
}

sub chain([$c1, $c2]) {
    my $color = @board[$c1][$c2];
    for %chains{$color}.kv -> $name, @coords {
        for @coords -> [$d1, $d2] {
            return $name
                if [$c1, $c2] eqv [$d1, $d2];
        }
    }
}

sub pal_chains($c1, $c2) {
    my @n = neighbors($c1, $c2);
    my $color = @board[$c1][$c2];
    sub same_color([$d1, $d2]) { $color eq @board[$d1][$d2] };
    my @sc = @n.grep: &same_color;
    my @chains = @sc.map: &chain;
    return @chains.unique;
}

sub neighbors($c1, $c2) {
    # . X X
    #  X . X
    #   X X .

    my @n;
    @n.push([$c1 - 1, $c2])     if $c1 > 0;
    @n.push([$c1 - 1, $c2 + 1]) if $c1 > 0 && $c2 < 14;
    @n.push([$c1, $c2 - 1])     if $c2 > 0;
    @n.push([$c1, $c2 + 1])     if $c2 < 14;
    @n.push([$c1 + 1, $c2 - 1]) if $c1 < 14 && $c2 > 0;
    @n.push([$c1 + 1, $c2])     if $c1 < 14;
    return @n;
}

my %next_chain_name =
    "V" => "Cv01",
    "H" => "Ch01",
;

sub seed_chain($color, $coords [$, $]) {
    my $name = %next_chain_name{$color}++;
    %chains{$color}{$name} = [$coords];
}

sub grow_chain($color, $name, $coords [$, $]) {
    %chains{$color}{$name}.push($coords);
}

sub join_chains($color, @names, $coords [$, $]) {
    my @coords = @names.map: { %chains{$color}{$_}.list };
    for @names -> $name {
        %chains{$color}{$name} :delete;
    }
    @coords.push($coords);
    sub edge_chain($name) { $name.substr(2, 1) eq "!" }
    my $name = @names.first(&edge_chain) // %next_chain_name{$color}++;
    if @names.grep(&edge_chain) == 2 {
        $name = @names[0].substr(0, 2) ~ "!W";
    }
    %chains{$color}{$name} = @coords;
}

class Link {
    has Int $.c1;
    has Int $.c2;
    has Str $.color;
    has Str @.chains;
}

sub find_links {
    my @links;
    for 1..13 -> $c1 {
        for 1..13 -> $c2 {
            next unless '.' eq @board[$c1][$c2];
            for "V", "H" -> $color {
                my @n = neighbors($c1, $c2);
                sub desired_color([$d1, $d2]) { $color eq @board[$d1][$d2] };
                my @dc = @n.grep: &desired_color;
                my @nchains = @dc.map(&chain).sort.squish;
                die "this really shouldn't happen: found a quadlink at [$c1, $c2]!"
                    if @nchains >= 4;
                for @nchains -> $ch1 {
                    for @nchains -> $ch2 {
                        next if $ch2 le $ch1;
                        my @chains = $ch1, $ch2;
                        push @links, Link.new(:$c1, :$c2, :$color, :@chains);
                    }
                }
            }
        }
    }
    return @links;
}

sub find_snags(@links) {
    @links.classify(-> $l { "$l.color();$l.c1();$l.c2()" }).grep(*.value.elems > 1)».key;
}

sub compute_groups(@links) {
    my %groups =
        "V" => {},
        "H" => {}
    ;
    for "V", "H" -> $color {
        for %chains{$color}.keys -> $name {
            my $groupname = $name.subst(/^C/, "G");
            %groups{$color}{$groupname} = [$name];
        }
    }
    for "V", "H" -> $color {
        COMBINE_ATTEMPT:
        loop {
            my %inv;
            for %groups{$color}.kv -> $group, @chains {
                for @chains -> $chain {
                    %inv{$chain} = $group;
                }
            }

            my %conn;
            for @links.grep(*.color eq $color) -> $link {
                my ($ch1, $ch2) = $link.chains.list;
                next if %inv{$ch1} eq %inv{$ch2};
                %conn{"$ch1;$ch2"}++;
            }
            my $conn = %conn.pairs.first(*.value > 1)
                or last COMBINE_ATTEMPT;

            my $name = $conn.key;
            my ($g1, $g2) = $name.split(";").map({ %inv{$_} });
            my @fragments = (.substr(2).comb(/../) for $g1, $g2);
            my $new_name = "G" ~ $color.lc ~ @fragments.sort.join;
            my @chains_g1 = %groups{$color}{$g1}.list;
            my @chains_g2 = %groups{$color}{$g2}.list;
            %groups{$color}{$g1} :delete;
            %groups{$color}{$g2} :delete;
            %groups{$color}{$new_name} = [@chains_g1, @chains_g2];
        }
    }
    return %groups;
}

sub show_groups(%groups, @links) {
    say "Groups:";
    for "V", "H" -> $color {
        my %inv;
        for %groups{$color}.kv -> $group, @chains {
            for @chains -> $chain {
                %inv{$chain} = $group;
            }
        }

        sub pieces(Pair (:key($name), :value(@chains))) {
            my $pieces = [+] @chains.map: -> $chain {
                %chains{$color}{$chain}.elems
            };
            $pieces -= 13 for $name.comb(/'!'/);
            return $pieces;
        }

        my $next_unique_letter = { V => "A", H => "a" }{$color};

        for %groups{$color}.sort(*.key).sort(&pieces).reverse -> Pair $p (:key($name), :value(@chains)) {
            my $pieces = pieces($p);
            next unless $pieces;

            my $letter = $next_unique_letter++;
            my $links = 0;
            for @links.grep(*.color eq $color) -> $link {
                my ($ch1, $ch2) = $link.chains.list;
                $links++ if %inv{$ch1} eq %inv{$ch2} eq $name;
            }
            my $s1 = $pieces == 1 ?? "" !! "s";
            my $s2 = $links == 1 ?? "" !! "s";
            say "  $letter: $pieces piece$s1; $links link$s2";
        }
        say "";
    }
}

sub MAIN($game = "mvm/93103") {
    given open($game) -> $fh {
        my &swap_coords = -> { die "swap_coords called before first move"; };

        sub process_new_move(Int $c1, Int $c2, Str $color) {
            @board[$c1][$c2] = $color;
            &swap_coords = -> { $c2, $c1 };

            my @n = pal_chains($c1, $c2);
            if @n == 0 {
                seed_chain($color, [$c1, $c2]);
            }
            elsif @n == 1 {
                grow_chain($color, @n[0], [$c1, $c2]);
            }
            else {
                join_chains($color, @n, [$c1, $c2]);
            }
            my @links = find_links;

            if find_snags(@links) -> @snags {
                show_board(@links, { V => {}, H => {} }, [$c1, $c2]);
                say "Found snags: ({@snags.join(" ")})";
                say "";
                return;
            }
            else {
                my %groups = compute_groups(@links);
                show_board(@links, %groups, [$c1, $c2]);
                show_groups(%groups, @links);
            }
        }

        for $fh.lines {
            .say;
            say "";

            when /^ (White|Black) ' places ' (\w)(\d+) '.' $/ {
                my $player = ~$0;
                my $column = ~$1;
                my $row = ~$2;

                my $color = $player eq "White" ?? "V" !! "H";
                my $c1 = +$row;
                my $c2 = ord($column) - ord("a") + 1;

                process_new_move($c1, $c2, $color);
            }

            when /^ 'Black swaps.' $/ {
                my $color = "H";
                my ($c1, $c2) = swap_coords;

                reset_board;
                reset_chains;

                process_new_move($c1, $c2, $color);
            }

            when /^ (White|Black) ' resigns.' $/ {
                say "Game over.";
            }

            when /^ (White|Black) ' times out.' $/ {
                say "Game over.";
            }

            die "could not match $_";
        }
    }
}

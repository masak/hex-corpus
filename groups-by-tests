use Test;

class Logger {
    has $.result = "";

    method log($message) {
        $!result ~= "$message\n";
    }
}

sub infer-groups(Logger:D $logger, $board) {
    sub LOG(*@things) { $logger.log([~] @things) }

    my @board = ['.' xx 15] xx 15;

    for $board.lines.kv -> $i, $line {
        my $row = $i + 1;
        for $line.comb(/\S/).kv -> $j, $char {
            my $col = $j + 1;
            @board[$row][$col] = $char;
        }
    }

    my class Pos {
        has $.r;
        has $.c;

        method Str { "($.r, $.c)" }
    }

    sub neighbors($pos) {
        sub is-inside($pos) { 0 <= $pos.r <= 14 && 0 <= $pos.c <= 14 }
        my ($r, $c) = $pos.r, $pos.c;

        return grep &is-inside,
            Pos.new(:r($r-1), :$c), Pos.new(:r($r-1), :c($c+1)),
            Pos.new(:$r, :c($c-1)), Pos.new(:$r, :c($c+1)),
            Pos.new(:r($r+1), :c($c-1)), Pos.new(:r($r+1), :$c),
        ;
    }

    my class Feather {
        has Pos $.pos;
    }

    my class Group {
        has Str $.name;
        has @.positions;

        method plumage {
            my %plumage;
            for @.positions -> $pos {
                for neighbors($pos)[] -> $n {
                    my ($r, $c) = $n.r, $n.c;
                    if @board[$r][$c] eq '.' {
                        %plumage{"$n.r();$n.c()"} = Pos.new(:$r, :$c);
                    }
                }
            }
            return %plumage.pairs.map({ Feather.new(:pos(.value)) })\
                    .sort(*.pos.c).sort(*.pos.r);
        }
    }

    my %seen;

    sub find-whole-chain($r, $c) {
        sub coords($pos) { "$pos.r();$pos.c()" }
        sub contents($pos) { @board[$pos.r][$pos.c] }

        my $chain = set();
        my @queue = Pos.new(:$r, :$c);
        while @queue {
            my $pos = @queue.shift;
            my $coords = "$pos.r();$pos.c()";
            next if %seen{$coords}++;

            $chain ∪= $coords;
            for neighbors($pos) -> $n {
                if contents($n) eq "#" && !%seen{coords $n} {
                    @queue.push: $n;
                }
            }
        }
        return $chain.list.map({
            /(\d+) ';' (\d+)/ or die "!";
            my ($r, $c) = +$0, +$1;
            Pos.new(:$r, :$c);
        }).sort(*.c).sort(*.r);
    }

    my $unique-group-name = "A";
    my @groups;

    my $unique-blocker-name = "b1";
    my %blockers;
    for @board.kv -> $r, @row {
        for @row.kv -> $c, $piece {
            if $piece eq "/" {
                my $name = $unique-blocker-name++;
                LOG "Found blocker ($name): ($r, $c)";
            }
            elsif $piece eq "#" && !%seen{"$r;$c"} {
                my $name = $unique-group-name++;
                my @positions = find-whole-chain($r, $c);
                @groups.push: Group.new(:$name, :@positions);
                LOG "Found chain ($name): @positions.join(", ")";
            }
        }
    }

    my class Link {
        has Str $.name;
        has Group @.groups;
        has Pos $.pos;
    }

    my $unique-link-name = "l1";
    my @links;
    for @groups X @groups -> $g1, $g2 {
        next if $g1.name ge $g2.name;
        my @p1 = $g1.plumage;
        my @p2 = $g2.plumage;
        for @p1 X @p2 -> $f1, $f2 {
            if $f1.pos eq $f2.pos {
                my $name = $unique-link-name++;
                @links.push: Link.new(:$name, :pos($f1.pos), :groups($g1, $g2));
                LOG "Weak {$g1.name}+{$g2.name} link ($name): $f1.pos()";
            }
        }
    }

    my %eliminated;
    my $i1 = 0;
    GROUP1:
    for 0..Inf -> $i1 {
        last if $i1 >= @groups;

        my $g1 = @groups[$i1];
        next GROUP1 if %eliminated{$g1.name};

        GROUP2:
        for $i1+1..Inf -> $i2 {
            last if $i2 >= @groups;

            my $g2 = @groups[$i2];
            next GROUP1 if %eliminated{$g1.name};
            next GROUP2 if %eliminated{$g2.name};

            sub links-between-groups {
                @links.grep({ .groups[0] === $g1 && .groups[1] === $g2 })
            }

            sub affected-links {
                my $lbg = set(links-between-groups);
                @links.grep({ $_ !∈ $lbg && (.groups[0] | .groups[1] === $g1 | $g2) });
            }

            my @lbg = links-between-groups();
            if @lbg >= 2 {
                my $name = $unique-group-name++;
                LOG "Forming group ($name): $g1.name(), $g2.name() || @lbg».name.join(", ")";
                my @positions = ($g1.positions[], $g2.positions[]).sort(*.c).sort(*.r);
                my $new-group = Group.new(:$name, :@positions);
                @groups.push($new-group);
                %eliminated{$g1.name}++;
                %eliminated{$g2.name}++;
                for affected-links() {
                    my $name = .name;
                    my $old-groups = .groups».name.join("+");
                    if .groups[0] === $g1 | $g2 {
                        .groups[0] = .groups[1]; # so they are still ordered by name
                    }
                    .groups[1] = $new-group;
                    my $new-groups = .groups».name.join("+");
                    LOG "    Upgrading $name: $old-groups -> $new-groups";
                }
            }
        }
    }
    @groups.=grep({ !%eliminated{.name} });

    LOG "Resulting groups: ", @groups».name.join(", ");
}

sub empty-diff($actual is copy, $expected is copy, $desc = "<description missing>") {
    s/<!after \n> $/\n/ for $actual, $expected;  # get rid of "no newline" warnings
    spurt("/tmp/t1", $expected);
    spurt("/tmp/t2", $actual);
    my $diff = qx[diff -U2 /tmp/t1 /tmp/t2];
    $diff.=subst(/^\N+\n\N+\n/, '');  # remove uninformative headers
    is $diff, "", $desc;
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . # . . . . . . . . .
            . . . . . . . . . . . . .
             . . . . . . . . . . . . .
              . . . . . . . . . . . . .
               . . . . . . . . . . . . .
                . . . . . . . # . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/, "two chains far apart";
        Found chain (A): (4, 4)
        Found chain (B): (9, 8)
        Resulting groups: A, B
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . # . . . . . .
            . . . . # . . . . . . . .
             . . . . . . . . . . . . .
              . . . . . . . . . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/, "group by bridge";
        Found chain (A): (4, 7)
        Found chain (B): (5, 5)
        Weak A+B link (l1): (4, 6)
        Weak A+B link (l2): (5, 6)
        Forming group (C): A, B || l1, l2
        Resulting groups: C
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . / # # . . . . .
            . . . . # . / # . . . . .
             . . . . # . / # . . . . .
              . . . . # . # . . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/, "group by two separate weak links";
        Found blocker (b1): (4, 6)
        Found chain (A): (4, 7), (4, 8), (5, 8), (6, 8), (7, 7)
        Found chain (B): (5, 5), (6, 5), (7, 5)
        Found blocker (b2): (5, 7)
        Found blocker (b3): (6, 7)
        Weak A+B link (l1): (5, 6)
        Weak A+B link (l2): (7, 6)
        Forming group (C): A, B || l1, l2
        Resulting groups: C
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . # . # . . . . . .
            . . . . . . . . . . . . .
             . . . . . . . . . . . . .
              . . . . . . . . . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/, "no group formed, only one weak link";
        Found chain (A): (4, 5)
        Found chain (B): (4, 7)
        Weak A+B link (l1): (4, 6)
        Resulting groups: A, B
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . # . . . . . .
            . . . . # . . . . . . . .
             . . . . . . . . . . . . .
              . . . . . . . . . . . . .
               . . . . . . . . . # . . .
                . . . . . . . . . . . . .
                 . . . . . . . . # . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/, "two bridges, two groups";
        Found chain (A): (4, 7)
        Found chain (B): (5, 5)
        Found chain (C): (8, 10)
        Found chain (D): (10, 9)
        Weak A+B link (l1): (4, 6)
        Weak A+B link (l2): (5, 6)
        Weak C+D link (l3): (9, 9)
        Weak C+D link (l4): (9, 10)
        Forming group (E): A, B || l1, l2
        Forming group (F): C, D || l3, l4
        Resulting groups: E, F
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . # . . . . . .
            . . . . # . . . . . . . .
             . . . . . . . . . . . . .
              . . . # . . . . . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/, "two bridges, one group";
        Found chain (A): (4, 7)
        Found chain (B): (5, 5)
        Found chain (C): (7, 4)
        Weak A+B link (l1): (4, 6)
        Weak A+B link (l2): (5, 6)
        Weak B+C link (l3): (6, 4)
        Weak B+C link (l4): (6, 5)
        Forming group (D): A, B || l1, l2
            Upgrading l3: B+C -> C+D
            Upgrading l4: B+C -> C+D
        Forming group (E): C, D || l3, l4
        Resulting groups: E
        LOG
}

done;
exit;

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . # . . # . . . . . .
            . . . # / . # . . . . . .
             . . . # / . # . . . . . .
              . . . # / . # . . . . . .
               . . . # / . . . . . . . .
                . . . # . . . . . . . . .
                 . . # . . . . . . . . . .
                  . . # . # . . . . . . . .
                   . . # # . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . . . . . . . .
            . . . # # . . . . . . . .
             . . # . . . . . . . . . .
              . . . . # . . . . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . . . . . . . .
            . . . # # # # # . . . . .
             . . # . . . . . . . . . .
              . . . . . . . # . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . # # # # . . .
           . . . . . # . . . # . . .
            . . . . # . . . . # . . .
             . . . # . . . . . # . . .
              . . # # . . . . . # . . .
               . # . . . . . . . . . . .
                # . . . . + . . . . . . .
                 # # # / . . . . . . . . .
                  . . # . . . . . . . . . .
                   . # . . . . . . . . . . .
                    . # . # . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . # . . . . . .
            . . . . # . . # . . . . .
             . . . . . . . # . # . . .
              . . . . . . . # . . . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . # . .
           . . . . . . . . . # . . .
            . . . . . . . . . # . . .
             . . . . . . . . . . . # .
              . . . . . . . . . # . . .
               . . . . . . . . . . . . .
                . . . . . . . . . . . . .
                 . . . . . . . . . . . . .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . # . .
           . . . . . . . . . # . . .
            . . . . . . . . . # . . .
             . . . . . . . . . . . # .
              . . . . . . . . . # . . .
               . . . . . . . . . # . . .
                . . . . . . . . . / # . .
                 . . . . . . . . . . # # .
                  . . . . . . . . . . . . .
                   . . . . . . . . . . . . .
                    . . . . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

{
    my Logger $logger .= new;
    my $board = infer-groups($logger, q:to/BOARD/);
        . . . . . . . . . . . . .
         . . . . . . . . . . . . .
          . . . . . . . . . . . . .
           . . . . . . . . . . . . .
            . . . . . . . . . . . . .
             . . . . . . . . . . . . .
              . . . . . . . . . . . . .
               . . . . # . . # / / . . .
                . . . . . # . . . # . . .
                 . . . . . . . / # . . . .
                  . . . # / # # # . . . . .
                   . . . . / / / / . . . . .
                    # # # . . . . . . . . . .
        BOARD

    empty-diff $logger.result, q:to/LOG/;
        LOG
}

done;

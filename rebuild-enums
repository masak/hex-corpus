use lib '.';

use DBIish;
my $dbh = DBIish.connect("SQLite", :database<corpus.sqlite3>, :RaiseError);

# colors
#
# The possible states of a position on the board. A position can be either empty,
# occupied by the white player, or occupied by the black player.

$dbh.do('DROP TABLE IF EXISTS colors');
$dbh.do('CREATE TABLE colors (
    color_id INTEGER PRIMARY KEY,
    opposite_color_id INTEGER NOT NULL,
    name VARCHAR(20) NOT NULL
)');

$dbh.do('INSERT INTO colors (opposite_color_id, name) VALUES
    (1, "EMPTY"),
    (3, "WHITE"),
    (2, "BLACK")
');

# coords
#
# The possible coordinates on a board. Of the form `Xnn`, where `X` ranges from
# `a` to `m`, and `nn` ranges from `1` to `13`. This is a cross product. In total,
# there are 13 * 13 = 169 coordinates.

$dbh.do('DROP TABLE IF EXISTS coords');
$dbh.do('CREATE TABLE coords (
    coord_id INTEGER PRIMARY KEY,
    name VARCHAR(3) NOT NULL
)');

sub insert($table, @spec, @items) {
    constant LIMIT = 500;

    sub prepare($n) {
        my $tuple = "(" ~ ('?' xx @spec).join(', ') ~ ")";
        my $statement = sprintf "INSERT INTO $table %s VALUES %s",
            "({@spec.join(', ')})",
            ($tuple xx $n).join(", ");
        $dbh.prepare($statement);
    }

    sub args(@m) {
        @m.map(-> $o { @spec.map(-> $p { $o{$p} }) });
    }

    if @items < LIMIT {
        prepare(+@items).execute(|args(@items));
    }
    else {
        my $I_LIMIT = prepare(LIMIT);
        while @items {
            my @m = @items.splice(0, LIMIT);
            if @m == LIMIT {
                $I_LIMIT.execute(|args(@m));
            }
            else {
                prepare(+@m).execute(|args(@m));
            }
        }
    }
}

my @coords = ('a'..'m' X~ 1..13).map({ { :name($_) } });
insert("coords", ('name',), @coords);

$dbh.disconnect;

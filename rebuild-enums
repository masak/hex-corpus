use lib '.';

use DBIish;
my $dbh = DBIish.connect("SQLite", :database<corpus.sqlite3>, :RaiseError);

# colors
#
# The possible states of a position on the board. A position can be either empty,
# occupied by the white player, or occupied by the black player.

$dbh.do('DROP TABLE IF EXISTS colors');
$dbh.do('CREATE TABLE colors (
    color_id INTEGER PRIMARY KEY,
    opposite_color_id INTEGER,
    name VARCHAR(20)
)');

$dbh.do('INSERT INTO colors (opposite_color_id, name) VALUES
    (1, "EMPTY"),
    (3, "WHITE"),
    (2, "BLACK")
');

# coords
#
# The possible coordinates on a board. Of the form `Xnn`, where `X` ranges from
# `a` to `m`, and `nn` ranges from `1` to `13`. This is a cross product. In total,
# there are 13 * 13 = 169 coordinates.

$dbh.do('DROP TABLE IF EXISTS coords');
$dbh.do('CREATE TABLE coords (
    coord_id INTEGER PRIMARY KEY,
    name VARCHAR(3)
)');

for 'a'..'m' X~ 1..13 {
    $dbh.do(qq[INSERT INTO coords (name) VALUES ("$_")]);
}

$dbh.disconnect;

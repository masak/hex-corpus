use lib '.';

use DBIish;
my $dbh = DBIish.connect("SQLite", :database<corpus.sqlite3>, :RaiseError);

$dbh.do('PRAGMA foreign_keys = ON');

# games
#
# A game between two players, already concluded. All the properties on it are in the
# past tense. A game was swapped if the second move was a swap move. A game was
# resigned if the last move was a resign move. Otherwise, the game was timed out.
# The game was won by the person who did not make the last move.

$dbh.do('DROP TABLE IF EXISTS timeouts');
$dbh.do('DROP TABLE IF EXISTS resigns');
$dbh.do('DROP TABLE IF EXISTS swaps');
$dbh.do('DROP TABLE IF EXISTS placements');
$dbh.do('DROP TABLE IF EXISTS moves');
$dbh.do('DROP TABLE IF EXISTS games');

$dbh.do(q:to/./);
    CREATE TABLE games (
        game_id         INTEGER PRIMARY KEY,
        name            VARCHAR(20) NOT NULL,
        was_swapped     INTEGER NOT NULL,
        was_resigned    INTEGER NOT NULL,
        was_timeout     INTEGER NOT NULL,
        winner          INTEGER NOT NULL,
            FOREIGN KEY(winner) REFERENCES colors(color_id)
    )
    .

enum Color <_ EMPTY WHITE BLACK>;

my @games;

for dir("mvm"), dir("hvm"), dir("hvh") -> $path {
    my $name = "$path";
    my $was_resigned = 0;
    my $was_timeout = 0;
    my $was_swapped = 0;

    my @moves = $path.IO.lines;
    my $winner = @moves % 2 ?? +BLACK !! +WHITE;

    for @moves {
        when "Black swaps." {
            $was_swapped = 1;
        }
        when /^ (White|Black) ' resigns.' $/ {
            $was_resigned = 1;
        }
        when /^ (White|Black) ' times out.' $/ {
            $was_timeout = 1;
        }
        when /^ (White|Black) ' places ' (\w)(\d+) '.' $/ {
            # don't care, not interested, boooring
        }
        die "Unknown input '$_'";
    }

    @games.push: { :$name, :$was_swapped, :$was_resigned, :$was_timeout, :$winner };
}

sub insert($table, @spec, @items) {
    constant LIMIT = 500;

    sub prepare($n) {
        my $tuple = "(" ~ ('?' xx @spec).join(', ') ~ ")";
        my $statement = sprintf "INSERT INTO $table %s VALUES %s",
            "({@spec.join(', ')})",
            ($tuple xx $n).join(", ");
        $dbh.prepare($statement);
    }

    sub args(@m) {
        @m.map(-> $o { @spec.map(-> $p { $o{$p} }) });
    }

    if @items < LIMIT {
        prepare(+@items).execute(|args(@items));
    }
    else {
        my $I_LIMIT = prepare(LIMIT);
        while @items {
            my @m = @items.splice(0, LIMIT);
            if @m == LIMIT {
                $I_LIMIT.execute(|args(@m));
            }
            else {
                prepare(+@m).execute(|args(@m));
            }
        }
    }
}

insert("games", <name was_swapped was_resigned was_timeout winner>, @games);

$dbh.disconnect;

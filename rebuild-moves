use lib '.';

use DBIish;
my $dbh = DBIish.connect("SQLite", :database<corpus.sqlite3>, :RaiseError);

$dbh.do('PRAGMA foreign_keys = ON');

enum Color <_ EMPTY WHITE BLACK>;

# moves
#
# A move in a game by one of the players. A move has a sequence number within its
# game, starting at 1. The "normal" move is a placement move, but three other
# kinds of move also exist: a swap move, which is a modified kind of placement;
# a resign move, which intentionally ends the game; and a timeout move, which
# unintentionally ends the game.

$dbh.do('DROP TABLE IF EXISTS timeouts');
$dbh.do('DROP TABLE IF EXISTS resigns');
$dbh.do('DROP TABLE IF EXISTS swaps');
$dbh.do('DROP TABLE IF EXISTS placements');
$dbh.do('DROP TABLE IF EXISTS moves');

$dbh.do(q:to/./);
    CREATE TABLE moves (
        move_id     INTEGER PRIMARY KEY,
        game_id     INTEGER NOT NULL,
        color_id    INTEGER NOT NULL,
        seq_no      INTEGER NOT NULL,
            FOREIGN KEY(game_id) REFERENCES games(game_id),
            FOREIGN KEY(color_id) REFERENCES colors(color_id)
    )
    .

$dbh.do(q:to/./);
    CREATE TABLE placements (
        placement_id    INTEGER PRIMARY KEY,
        move_id         INTEGER NOT NULL,
        coord_id        INTEGER NOT NULL,
            FOREIGN KEY(move_id) REFERENCES moves(move_id),
            FOREIGN KEY(coord_id) REFERENCES coords(coord_id)
    )
    .

$dbh.do(q:to/./);
    CREATE TABLE swaps (
        swap_id         INTEGER PRIMARY KEY,
        move_id         INTEGER NOT NULL,
        placement_id    INTEGER NOT NULL,
            FOREIGN KEY(move_id) REFERENCES moves(move_id),
            FOREIGN KEY(placement_id) REFERENCES placements(placement_id)
    )
    .

$dbh.do(q:to/./);
    CREATE TABLE resigns (
        resign_id       INTEGER PRIMARY KEY,
        move_id         INTEGER NOT NULL,
            FOREIGN KEY(move_id) REFERENCES moves(move_id)
    )
    .

$dbh.do(q:to/./);
    CREATE TABLE timeouts (
        timeout_id      INTEGER PRIMARY KEY,
        move_id         INTEGER NOT NULL,
            FOREIGN KEY(move_id) REFERENCES moves(move_id)
    )
    .

my $tot = dir("mvm").elems + dir("hvm").elems + dir("hvh").elems;

my $select_games = $dbh.prepare(qq:to/./);
    SELECT name, game_id
    FROM games
    .
$select_games.execute();
my %game_id_of;
for $select_games.fetchall_arrayref.list -> [$name, $game_id] {
    %game_id_of{$name} = $game_id;
}

my $select_coords = $dbh.prepare(qq:to/./);
    SELECT name, coord_id
    FROM coords
    .
$select_coords.execute();
my %coord_id_of;
for $select_coords.fetchall_arrayref.list -> [$name, $coord_id] {
    %coord_id_of{$name} = $coord_id;
}

my %swap;
for 'a'..'m' Z 1..13 -> $row1, $col2 {
    for 'a'..'m' Z 1..13 -> $row2, $col1 {
        %swap{$row1 ~ $col1} = $row2 ~ $col2;
    }
}

my $move_id = 1;
my $placement_id = 1;

my @moves;
my @placements;
my @swaps;
my @resigns;
my @timeouts;

for dir("mvm"), dir("hvm"), dir("hvh") -> $path {
    my $game_id = %game_id_of{$path}
        or die "Did not find game '$path' in database";

    my $seq_no = 1;
    my $saved_coord = "unassigned";
    for $path.IO.lines {
        my $color_id = $seq_no % 2 ?? +WHITE !! +BLACK;
        @moves.push: { :$game_id, :$color_id, :$seq_no };

        when /^ [White|Black] ' places ' (\w\d+) '.' $/ {
            my $coord = ~$0;
            my $coord_id = %coord_id_of{$coord};
            @placements.push: { :$move_id, :$coord_id };
            $saved_coord = $coord;
        }
        when "Black swaps." {
            my $coord = %swap{$saved_coord};
            my $coord_id = %coord_id_of{$coord};
            @placements.push: { :$move_id, :$coord_id };
            @swaps.push: { :$move_id, :$placement_id };
            ++$placement_id;
        }
        when /^ (White|Black) ' resigns.' $/ {
            @resigns.push: { :$move_id };
        }
        when /^ (White|Black) ' times out.' $/ {
            @timeouts.push: { :$move_id };
        }
        die "Unknown input '$_'";

        NEXT {
            ++$move_id;
            ++$seq_no;
        }
    }
}

my $INSERT_MOVE = $dbh.prepare(q:to/./);
    INSERT INTO moves (game_id, color_id, seq_no)
        VALUES (?, ?, ?)
    .

my $INSERT_2_MOVES = $dbh.prepare(q:to/./);
    INSERT INTO moves (game_id, color_id, seq_no)
        VALUES (?, ?, ?), (?, ?, ?)
    .

my $INSERT_4_MOVES = $dbh.prepare(q:to/./);
    INSERT INTO moves (game_id, color_id, seq_no)
        VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?)
    .

my $INSERT_8_MOVES = $dbh.prepare(q:to/./);
    INSERT INTO moves (game_id, color_id, seq_no)
        VALUES (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?),
               (?, ?, ?), (?, ?, ?), (?, ?, ?), (?, ?, ?)
    .

while @moves >= 8 {
    my $m1 = @moves.shift;
    my $m2 = @moves.shift;
    my $m3 = @moves.shift;
    my $m4 = @moves.shift;
    my $m5 = @moves.shift;
    my $m6 = @moves.shift;
    my $m7 = @moves.shift;
    my $m8 = @moves.shift;
    $INSERT_8_MOVES.execute(
        $m1<game_id>, $m1<color_id>, $m1<seq_no>,
        $m2<game_id>, $m2<color_id>, $m2<seq_no>,
        $m3<game_id>, $m3<color_id>, $m3<seq_no>,
        $m4<game_id>, $m4<color_id>, $m4<seq_no>,
        $m5<game_id>, $m5<color_id>, $m5<seq_no>,
        $m6<game_id>, $m6<color_id>, $m6<seq_no>,
        $m7<game_id>, $m7<color_id>, $m7<seq_no>,
        $m8<game_id>, $m8<color_id>, $m8<seq_no>,
    );
}
while @moves >= 4 {
    my $m1 = @moves.shift;
    my $m2 = @moves.shift;
    my $m3 = @moves.shift;
    my $m4 = @moves.shift;
    $INSERT_4_MOVES.execute(
        $m1<game_id>, $m1<color_id>, $m1<seq_no>,
        $m2<game_id>, $m2<color_id>, $m2<seq_no>,
        $m3<game_id>, $m3<color_id>, $m3<seq_no>,
        $m4<game_id>, $m4<color_id>, $m4<seq_no>,
    );
}
while @moves >= 2 {
    my $m1 = @moves.shift;
    my $m2 = @moves.shift;
    $INSERT_2_MOVES.execute(
        $m1<game_id>, $m1<color_id>, $m1<seq_no>,
        $m2<game_id>, $m2<color_id>, $m2<seq_no>,
    );
}
while @moves {
    my $m1 = @moves.shift;
    $INSERT_MOVE.execute(
        $m1<game_id>, $m1<color_id>, $m1<seq_no>,
    );
}

my $INSERT_PLACEMENT = $dbh.prepare(q:to/./);
    INSERT INTO placements (move_id, coord_id)
        VALUES (?, ?)
    .

my $INSERT_2_PLACEMENTS = $dbh.prepare(q:to/./);
    INSERT INTO placements (move_id, coord_id)
        VALUES (?, ?), (?, ?)
    .

my $INSERT_4_PLACEMENTS = $dbh.prepare(q:to/./);
    INSERT INTO placements (move_id, coord_id)
        VALUES (?, ?), (?, ?), (?, ?), (?, ?)
    .

my $INSERT_8_PLACEMENTS = $dbh.prepare(q:to/./);
    INSERT INTO placements (move_id, coord_id)
        VALUES (?, ?), (?, ?), (?, ?), (?, ?),
               (?, ?), (?, ?), (?, ?), (?, ?)
    .

while @placements >= 8 {
    my $p1 = @placements.shift;
    my $p2 = @placements.shift;
    my $p3 = @placements.shift;
    my $p4 = @placements.shift;
    my $p5 = @placements.shift;
    my $p6 = @placements.shift;
    my $p7 = @placements.shift;
    my $p8 = @placements.shift;
    $INSERT_8_PLACEMENTS.execute(
        $p1<move_id>, $p1<coord_id>,
        $p2<move_id>, $p2<coord_id>,
        $p3<move_id>, $p3<coord_id>,
        $p4<move_id>, $p4<coord_id>,
        $p5<move_id>, $p5<coord_id>,
        $p6<move_id>, $p6<coord_id>,
        $p7<move_id>, $p7<coord_id>,
        $p8<move_id>, $p8<coord_id>,
    );
}
while @placements >= 4 {
    my $p1 = @placements.shift;
    my $p2 = @placements.shift;
    my $p3 = @placements.shift;
    my $p4 = @placements.shift;
    $INSERT_4_PLACEMENTS.execute(
        $p1<move_id>, $p1<coord_id>,
        $p2<move_id>, $p2<coord_id>,
        $p3<move_id>, $p3<coord_id>,
        $p4<move_id>, $p4<coord_id>,
    );
}
while @placements >= 2 {
    my $p1 = @placements.shift;
    my $p2 = @placements.shift;
    $INSERT_2_PLACEMENTS.execute(
        $p1<move_id>, $p1<coord_id>,
        $p2<move_id>, $p2<coord_id>,
    );
}
while @placements {
    my $p1 = @placements.shift;
    $INSERT_PLACEMENT.execute(
        $p1<move_id>, $p1<coord_id>,
    );
}

my $INSERT_SWAP = $dbh.prepare(q:to/./);
    INSERT INTO swaps (move_id, placement_id)
        VALUES (?, ?)
    .

while @swaps {
    my $s1 = @swaps.shift;
    $INSERT_SWAP.execute(
        $s1<move_id>, $s1<placement_id>
    );
}

my $INSERT_RESIGN = $dbh.prepare(q:to/./);
    INSERT INTO resigns (move_id)
        VALUES (?)
    .

while @resigns {
    my $r1 = @resigns.shift;
    $INSERT_RESIGN.execute(
        $r1<move_id>
    );
}

my $INSERT_TIMEOUT = $dbh.prepare(q:to/./);
    INSERT INTO timeouts (move_id)
        VALUES (?)
    .

while @timeouts {
    my $t1 = @timeouts.shift;
    $INSERT_TIMEOUT.execute(
        $t1<move_id>
    );
}

$dbh.disconnect;

grammar HSGF {
    method panic {
        my $orig = self.orig;
        my $pos = self.pos;
        my $EJECT = "‚èè";
        die $orig.substr(0, $pos), $EJECT, $orig.substr($pos);
    }

    regex TOP {
        ^
        [ <.prefix> || <.panic> ]
        [ <move>*   || <.panic> ]
        [ <.suffix> || <.panic> ]
        $
    }

    regex prefix {
        '(;'
        'FF[4]'
        'EV[' <-[\]]>+ ']'
        'PB[' <-[\]]>+ ']'   # name of black player
        'PW[' <-[\]]>+ ']'   # name of white player
        'SZ[13]'            # board size
        'RE[' <[BW]> ']'
        'GC[' <-[\]]>+ ']'
        'SO[' <-[\]]>+ ']'   # website
    }

    regex suffix { ')' }

    regex move {
        ';'
        $<player>=[ 'W' || 'B' ]
        '['
        [ <place> | <swap> | <resign> ]
        ']'
    }

    regex place { $<col>=[\w] $<row>=[\w] }
    regex swap { 'swap' }
    regex resign { 'resign' }
}

my $line = get;
HSGF.parse($line);
for $<move>.list -> $/ {
    my $player = $<player> eq 'W' ?? 'White' !! 'Black';
    if $<place> {
        my $position = $<place><col> ~ (ord($<place><row>) - ord('a') + 1);
        say "$player places $position.";
    }
    elsif $<swap> {
        say "$player swaps.";
    }
    elsif $<resign> {
        say "$player resigns.";
    }
}
